/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { Bridge } from "./Bridge";

export class BridgeFactory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<Bridge> {
    return super.deploy(overrides || {}) as Promise<Bridge>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Bridge {
    return super.attach(address) as Bridge;
  }
  connect(signer: Signer): BridgeFactory {
    return super.connect(signer) as BridgeFactory;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bridge {
    return new Contract(address, _abi, signerOrProvider) as Bridge;
  }
}

const _abi = [
  {
    inputs: [],
    name: "ACTIVE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GRACE_PERIOD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MINIMUM_FOR_VOTES_THRESHOLD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "QUEUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WARM_UP",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "queuedTransactions",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101b8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631a3d203d146100675780631e9d5fad14610085578063b17ac1e1146100a3578063c1a287e2146100c1578063c90bd047146100df578063f2b06537146100fd575b600080fd5b61006f610141565b6040518082815260200191505060405180910390f35b61008d610148565b6040518082815260200191505060405180910390f35b6100ab61014f565b6040518082815260200191505060405180910390f35b6100c9610154565b6040518082815260200191505060405180910390f35b6100e761015b565b6040518082815260200191505060405180910390f35b6101296004803603602081101561011357600080fd5b8101908080359060200190929190505050610162565b60405180821515815260200191505060405180910390f35b6202a30081565b6202a30081565b603c81565b6202a30081565b6202a30081565b60006020528060005260406000206000915054906101000a900460ff168156fea2646970667358221220119f68a692de4c202b759541ff46710b8e20729ba49f00b4f8d1e99efae6ab3264736f6c63430007030033";

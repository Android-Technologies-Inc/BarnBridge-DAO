/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ConstantsInterface extends ethers.utils.Interface {
  functions: {
    "ACTIVE()": FunctionFragment;
    "GRACE_PERIOD()": FunctionFragment;
    "MINIMUM_FOR_VOTES_THRESHOLD()": FunctionFragment;
    "MINIMUM_QUORUM()": FunctionFragment;
    "QUEUE()": FunctionFragment;
    "WARM_UP()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ACTIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_FOR_VOTES_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_QUORUM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "QUEUE", values?: undefined): string;
  encodeFunctionData(functionFragment: "WARM_UP", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ACTIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_FOR_VOTES_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_QUORUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QUEUE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WARM_UP", data: BytesLike): Result;

  events: {};
}

export class Constants extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ConstantsInterface;

  functions: {
    ACTIVE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ACTIVE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    GRACE_PERIOD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "GRACE_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MINIMUM_FOR_VOTES_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MINIMUM_FOR_VOTES_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MINIMUM_QUORUM(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MINIMUM_QUORUM()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    QUEUE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "QUEUE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    WARM_UP(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "WARM_UP()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;
  };

  ACTIVE(overrides?: CallOverrides): Promise<BigNumber>;

  "ACTIVE()"(overrides?: CallOverrides): Promise<BigNumber>;

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_FOR_VOTES_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  "MINIMUM_FOR_VOTES_THRESHOLD()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MINIMUM_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

  "MINIMUM_QUORUM()"(overrides?: CallOverrides): Promise<BigNumber>;

  QUEUE(overrides?: CallOverrides): Promise<BigNumber>;

  "QUEUE()"(overrides?: CallOverrides): Promise<BigNumber>;

  WARM_UP(overrides?: CallOverrides): Promise<BigNumber>;

  "WARM_UP()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    ACTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTIVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_FOR_VOTES_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_FOR_VOTES_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_QUORUM()"(overrides?: CallOverrides): Promise<BigNumber>;

    QUEUE(overrides?: CallOverrides): Promise<BigNumber>;

    "QUEUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    WARM_UP(overrides?: CallOverrides): Promise<BigNumber>;

    "WARM_UP()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    ACTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTIVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_FOR_VOTES_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_FOR_VOTES_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_QUORUM()"(overrides?: CallOverrides): Promise<BigNumber>;

    QUEUE(overrides?: CallOverrides): Promise<BigNumber>;

    "QUEUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    WARM_UP(overrides?: CallOverrides): Promise<BigNumber>;

    "WARM_UP()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ACTIVE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_FOR_VOTES_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MINIMUM_FOR_VOTES_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINIMUM_QUORUM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    QUEUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "QUEUE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WARM_UP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WARM_UP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface GovernanceInterface extends ethers.utils.Interface {
  functions: {
    "ACTIVE()": FunctionFragment;
    "GRACE_PERIOD()": FunctionFragment;
    "MINIMUM_FOR_VOTES_THRESHOLD()": FunctionFragment;
    "MINIMUM_QUORUM()": FunctionFragment;
    "QUEUE()": FunctionFragment;
    "WARM_UP()": FunctionFragment;
    "abdicate()": FunctionFragment;
    "anoint(address)": FunctionFragment;
    "cancel(uint256)": FunctionFragment;
    "cancelVote(uint256)": FunctionFragment;
    "castVote(uint256,bool)": FunctionFragment;
    "execute(uint256)": FunctionFragment;
    "getActions(uint256)": FunctionFragment;
    "getReceipt(uint256,address)": FunctionFragment;
    "guardian()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "lastProposalId()": FunctionFragment;
    "latestProposalIds(address)": FunctionFragment;
    "proposalMaxOperations()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "propose(address[],uint256[],string[],bytes[],string,string)": FunctionFragment;
    "queue(uint256)": FunctionFragment;
    "queuedTransactions(bytes32)": FunctionFragment;
    "setActivePeriod(uint256)": FunctionFragment;
    "setGracePeriod(uint256)": FunctionFragment;
    "setQueuePeriod(uint256)": FunctionFragment;
    "setWarmUpPeriod(uint256)": FunctionFragment;
    "startVote(uint256)": FunctionFragment;
    "state(uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "ACTIVE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "GRACE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_FOR_VOTES_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_QUORUM",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "QUEUE", values?: undefined): string;
  encodeFunctionData(functionFragment: "WARM_UP", values?: undefined): string;
  encodeFunctionData(functionFragment: "abdicate", values?: undefined): string;
  encodeFunctionData(functionFragment: "anoint", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReceipt",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "guardian", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastProposalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestProposalIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalMaxOperations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "propose",
    values: [string[], BigNumberish[], string[], BytesLike[], string, string]
  ): string;
  encodeFunctionData(functionFragment: "queue", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "queuedTransactions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setActivePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setGracePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setQueuePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWarmUpPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "startVote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "state", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "ACTIVE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GRACE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_FOR_VOTES_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_QUORUM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "QUEUE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "WARM_UP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "abdicate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "anoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancelVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getActions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getReceipt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "guardian", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastProposalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestProposalIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalMaxOperations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "propose", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "queue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queuedTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setActivePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGracePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQueuePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWarmUpPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;

  events: {};
}

export class Governance extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: GovernanceInterface;

  functions: {
    ACTIVE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ACTIVE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    GRACE_PERIOD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "GRACE_PERIOD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MINIMUM_FOR_VOTES_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MINIMUM_FOR_VOTES_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    MINIMUM_QUORUM(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "MINIMUM_QUORUM()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    QUEUE(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "QUEUE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    WARM_UP(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "WARM_UP()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    abdicate(overrides?: Overrides): Promise<ContractTransaction>;

    "abdicate()"(overrides?: Overrides): Promise<ContractTransaction>;

    anoint(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "anoint(address)"(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    cancelVote(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "cancelVote(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        votes: BigNumber;
        support: boolean;
        0: boolean;
        1: BigNumber;
        2: boolean;
      };
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      0: {
        hasVoted: boolean;
        votes: BigNumber;
        support: boolean;
        0: boolean;
        1: BigNumber;
        2: boolean;
      };
    }>;

    guardian(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "guardian()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    initialize(
      barnAddr: string,
      guardianAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address)"(
      barnAddr: string,
      guardianAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastProposalId(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastProposalId()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      description: string;
      title: string;
      createTime: BigNumber;
      startTime: BigNumber;
      quorum: BigNumber;
      eta: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: boolean;
      11: boolean;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      description: string;
      title: string;
      createTime: BigNumber;
      startTime: BigNumber;
      quorum: BigNumber;
      eta: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: boolean;
      11: boolean;
    }>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "propose(address[],uint256[],string[],bytes[],string,string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      0: boolean;
    }>;

    setActivePeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setActivePeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setGracePeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setGracePeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setQueuePeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setQueuePeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setWarmUpPeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setWarmUpPeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    startVote(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "startVote(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;
  };

  ACTIVE(overrides?: CallOverrides): Promise<BigNumber>;

  "ACTIVE()"(overrides?: CallOverrides): Promise<BigNumber>;

  GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

  "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

  MINIMUM_FOR_VOTES_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

  "MINIMUM_FOR_VOTES_THRESHOLD()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  MINIMUM_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

  "MINIMUM_QUORUM()"(overrides?: CallOverrides): Promise<BigNumber>;

  QUEUE(overrides?: CallOverrides): Promise<BigNumber>;

  "QUEUE()"(overrides?: CallOverrides): Promise<BigNumber>;

  WARM_UP(overrides?: CallOverrides): Promise<BigNumber>;

  "WARM_UP()"(overrides?: CallOverrides): Promise<BigNumber>;

  abdicate(overrides?: Overrides): Promise<ContractTransaction>;

  "abdicate()"(overrides?: Overrides): Promise<ContractTransaction>;

  anoint(
    newGuardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "anoint(address)"(
    newGuardian: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancel(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancel(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  cancelVote(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "cancelVote(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  castVote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "castVote(uint256,bool)"(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  execute(
    proposalId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "execute(uint256)"(
    proposalId: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  getActions(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: BigNumber[];
    2: string[];
    3: string[];
  }>;

  "getActions(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    targets: string[];
    values: BigNumber[];
    signatures: string[];
    calldatas: string[];
    0: string[];
    1: BigNumber[];
    2: string[];
    3: string[];
  }>;

  getReceipt(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    votes: BigNumber;
    support: boolean;
    0: boolean;
    1: BigNumber;
    2: boolean;
  }>;

  "getReceipt(uint256,address)"(
    proposalId: BigNumberish,
    voter: string,
    overrides?: CallOverrides
  ): Promise<{
    hasVoted: boolean;
    votes: BigNumber;
    support: boolean;
    0: boolean;
    1: BigNumber;
    2: boolean;
  }>;

  guardian(overrides?: CallOverrides): Promise<string>;

  "guardian()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    barnAddr: string,
    guardianAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address)"(
    barnAddr: string,
    guardianAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastProposalId(overrides?: CallOverrides): Promise<BigNumber>;

  "lastProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

  latestProposalIds(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "latestProposalIds(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

  "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    description: string;
    title: string;
    createTime: BigNumber;
    startTime: BigNumber;
    quorum: BigNumber;
    eta: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: boolean;
    11: boolean;
  }>;

  "proposals(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    id: BigNumber;
    proposer: string;
    description: string;
    title: string;
    createTime: BigNumber;
    startTime: BigNumber;
    quorum: BigNumber;
    eta: BigNumber;
    forVotes: BigNumber;
    againstVotes: BigNumber;
    canceled: boolean;
    executed: boolean;
    0: BigNumber;
    1: string;
    2: string;
    3: string;
    4: BigNumber;
    5: BigNumber;
    6: BigNumber;
    7: BigNumber;
    8: BigNumber;
    9: BigNumber;
    10: boolean;
    11: boolean;
  }>;

  propose(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    title: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "propose(address[],uint256[],string[],bytes[],string,string)"(
    targets: string[],
    values: BigNumberish[],
    signatures: string[],
    calldatas: BytesLike[],
    description: string,
    title: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queue(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "queue(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  queuedTransactions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "queuedTransactions(bytes32)"(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setActivePeriod(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setActivePeriod(uint256)"(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setGracePeriod(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setGracePeriod(uint256)"(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setQueuePeriod(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setQueuePeriod(uint256)"(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setWarmUpPeriod(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setWarmUpPeriod(uint256)"(
    period: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  startVote(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "startVote(uint256)"(
    proposalId: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

  "state(uint256)"(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  callStatic: {
    ACTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTIVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_FOR_VOTES_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_FOR_VOTES_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_QUORUM()"(overrides?: CallOverrides): Promise<BigNumber>;

    QUEUE(overrides?: CallOverrides): Promise<BigNumber>;

    "QUEUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    WARM_UP(overrides?: CallOverrides): Promise<BigNumber>;

    "WARM_UP()"(overrides?: CallOverrides): Promise<BigNumber>;

    abdicate(overrides?: CallOverrides): Promise<void>;

    "abdicate()"(overrides?: CallOverrides): Promise<void>;

    anoint(newGuardian: string, overrides?: CallOverrides): Promise<void>;

    "anoint(address)"(
      newGuardian: string,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelVote(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "cancelVote(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    execute(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      targets: string[];
      values: BigNumber[];
      signatures: string[];
      calldatas: string[];
      0: string[];
      1: BigNumber[];
      2: string[];
      3: string[];
    }>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      votes: BigNumber;
      support: boolean;
      0: boolean;
      1: BigNumber;
      2: boolean;
    }>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<{
      hasVoted: boolean;
      votes: BigNumber;
      support: boolean;
      0: boolean;
      1: BigNumber;
      2: boolean;
    }>;

    guardian(overrides?: CallOverrides): Promise<string>;

    "guardian()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      barnAddr: string,
      guardianAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address)"(
      barnAddr: string,
      guardianAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "lastProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      description: string;
      title: string;
      createTime: BigNumber;
      startTime: BigNumber;
      quorum: BigNumber;
      eta: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: boolean;
      11: boolean;
    }>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      id: BigNumber;
      proposer: string;
      description: string;
      title: string;
      createTime: BigNumber;
      startTime: BigNumber;
      quorum: BigNumber;
      eta: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      canceled: boolean;
      executed: boolean;
      0: BigNumber;
      1: string;
      2: string;
      3: string;
      4: BigNumber;
      5: BigNumber;
      6: BigNumber;
      7: BigNumber;
      8: BigNumber;
      9: BigNumber;
      10: boolean;
      11: boolean;
    }>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "propose(address[],uint256[],string[],bytes[],string,string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setActivePeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setActivePeriod(uint256)"(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setGracePeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setGracePeriod(uint256)"(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setQueuePeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setQueuePeriod(uint256)"(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setWarmUpPeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setWarmUpPeriod(uint256)"(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startVote(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "startVote(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    state(proposalId: BigNumberish, overrides?: CallOverrides): Promise<number>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;
  };

  filters: {};

  estimateGas: {
    ACTIVE(overrides?: CallOverrides): Promise<BigNumber>;

    "ACTIVE()"(overrides?: CallOverrides): Promise<BigNumber>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<BigNumber>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<BigNumber>;

    MINIMUM_FOR_VOTES_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_FOR_VOTES_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<BigNumber>;

    "MINIMUM_QUORUM()"(overrides?: CallOverrides): Promise<BigNumber>;

    QUEUE(overrides?: CallOverrides): Promise<BigNumber>;

    "QUEUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    WARM_UP(overrides?: CallOverrides): Promise<BigNumber>;

    "WARM_UP()"(overrides?: CallOverrides): Promise<BigNumber>;

    abdicate(overrides?: Overrides): Promise<BigNumber>;

    "abdicate()"(overrides?: Overrides): Promise<BigNumber>;

    anoint(newGuardian: string, overrides?: Overrides): Promise<BigNumber>;

    "anoint(address)"(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancel(proposalId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    cancelVote(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "cancelVote(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    guardian(overrides?: CallOverrides): Promise<BigNumber>;

    "guardian()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      barnAddr: string,
      guardianAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address)"(
      barnAddr: string,
      guardianAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastProposalId(overrides?: CallOverrides): Promise<BigNumber>;

    "lastProposalId()"(overrides?: CallOverrides): Promise<BigNumber>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalMaxOperations(overrides?: CallOverrides): Promise<BigNumber>;

    "proposalMaxOperations()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "propose(address[],uint256[],string[],bytes[],string,string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queue(proposalId: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setActivePeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setActivePeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setGracePeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setGracePeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setQueuePeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setQueuePeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setWarmUpPeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setWarmUpPeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    startVote(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "startVote(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ACTIVE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "ACTIVE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRACE_PERIOD(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "GRACE_PERIOD()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MINIMUM_FOR_VOTES_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MINIMUM_FOR_VOTES_THRESHOLD()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MINIMUM_QUORUM(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MINIMUM_QUORUM()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    QUEUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "QUEUE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WARM_UP(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "WARM_UP()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    abdicate(overrides?: Overrides): Promise<PopulatedTransaction>;

    "abdicate()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    anoint(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "anoint(address)"(
      newGuardian: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancel(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancel(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    cancelVote(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "cancelVote(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    castVote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "castVote(uint256,bool)"(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    execute(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "execute(uint256)"(
      proposalId: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    getActions(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getActions(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReceipt(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReceipt(uint256,address)"(
      proposalId: BigNumberish,
      voter: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    guardian(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "guardian()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      barnAddr: string,
      guardianAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address)"(
      barnAddr: string,
      guardianAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastProposalId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastProposalId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestProposalIds(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestProposalIds(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalMaxOperations(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposalMaxOperations()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "proposals(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    propose(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "propose(address[],uint256[],string[],bytes[],string,string)"(
      targets: string[],
      values: BigNumberish[],
      signatures: string[],
      calldatas: BytesLike[],
      description: string,
      title: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queue(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "queue(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    queuedTransactions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "queuedTransactions(bytes32)"(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setActivePeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setActivePeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setGracePeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setGracePeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setQueuePeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setQueuePeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setWarmUpPeriod(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setWarmUpPeriod(uint256)"(
      period: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    startVote(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "startVote(uint256)"(
      proposalId: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    state(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "state(uint256)"(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
